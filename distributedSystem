/**************************************************************
 * Programmer: Md. Manzoor Murshed                            *
 * Date: 03/28/06                                             *  
 * Program: Chat Provider Interface                           * 
 *                                                            *
 **************************************************************/
import java.rmi.*;
import java.util.Vector;

/** RMI Interface for Provider*/
public interface ChatProvider extends Remote {
	public int register(String name, String info) throws RemoteException;
	public int unregister(String name)throws RemoteException;
	public String getinfo(String name) throws RemoteException;
      public Vector getChatRooms() throws RemoteException;  
	public Vector getInformation() throws RemoteException;
	int  signIn(String s, int i) throws java.rmi.RemoteException;
	void broadcast(String s,int i ) throws java.rmi.RemoteException;
	String getbroadcast() throws java.rmi.RemoteException;
      void reset() throws java.rmi.RemoteException; 
}

Provider.java

/**************************************************************
 * Programmer: Md. Manzoor Murshed                            *
 * Date: 03/28/06                                             *  
 * Program: Chat Provider implementation                      * 
 *                                                            *
 **************************************************************/
import java.rmi.*;
import java.rmi.server.UnicastRemoteObject;
import java.util.Vector;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.RemoteRef;

/**  This class implements our RMI methods */
public class Provider extends UnicastRemoteObject implements
		ChatProvider {

	//private members
	private Vector chatrooms;
        private Vector info; 
	private String name;
	String [] Users=new String[50];
	public String hold_last_message;

	//constructor
	public Provider(String s) throws RemoteException {
		super(); 
		chatrooms = new Vector();
            info = new Vector();
            name = s; 
	}

	//Register a chat room 
	public int register(String name, String information) throws RemoteException 
	{
            System.out.println("Registering Chat Room: " + name);
	    chatrooms.add(name);
            info.add(information);
	    return 1;
	}

	//unregister a chat room
	public int unregister(String name) throws RemoteException 
	{
                int index = chatrooms.indexOf(name); 
		System.out.println("Unregistering Chat Room: " + name);
		chatrooms.remove(name);
		info.remove(index); 
		return 1;
	}
      //get information regarding a Chat room
      public String getinfo(String name) throws RemoteException
	{
		String i;
                int index = chatrooms.indexOf(name);  		
		i = (String) info.get(index);
		return i;
	}

	//Return a list of information of the ChatRooms
	public Vector getChatRooms() {
		return chatrooms;
            	}

//Return a informations of the registered ChatRooms
	public Vector getInformation() {
		 return info; 
	}
//user sign in a chat room

public int signIn(String s,int i) throws java.rmi.RemoteException{
        boolean free_spot=false;
        int j=0;
        if(i==-1){
            while((!free_spot)&(j<50)){
                if(Users[j]==null){
                    Users[j]=s;
                    free_spot=true;
                    return j;
                }
                else
                j++;
            }
            return -1;//Connection refused
        }
        else{
            Users[i]=null;
            return -1;
        }
    }
//broadcast the message

	public void broadcast(String s,int i) throws java.rmi.RemoteException
	    {hold_last_message=hold_last_message+"\n"+Users[i]+": "+s;
	    }

//get the broadcast message

	public String getbroadcast() throws java.rmi.RemoteException
	{return hold_last_message;}

//reset hold_last_message

       public void reset() throws java.rmi.RemoteException
        {hold_last_message="";}

//Main Program...
public static void main(String[] args) {
		
		//int i; 
                System.out.println("Starting RMI Chat Server");
		
		try {
			
			// Load the service
			Provider server = new Provider("ChatServer");
			
			//Examine the service, to see where it is stored
			RemoteRef location = server.getRef();
			System.out.println(location.remoteToString());
		 	
			// Chech to see if a registry was specified
			String registry = "localhost";
			if(args.length >=1)
			{
				registry = args[0];
			}
			
		// Registration format //registry_hostname :port /service
		// :port if optional
	String registration = "rmi://" + registry + ":4099/ChatRegistry";
			
		// Registrer with service so that clients can find us
			Naming.rebind(registration, server);
			
		}catch(RemoteException re){
			System.err.println("Remote Error - " + re);
		}catch(Exception e){
			System.err.println("Error - " + e);
		}
	}
}

Server.java

/**************************************************************
 * Programmer: Md. Manzoor Murshed                            *
 * Date: 03/28/06                                             *  
 * Program: Chat Server                                       * 
 *                                                            *
 **************************************************************/
import java.rmi.*; 
import java.util.Vector;
import java.io.*; 
public class Server
{
 public static void main (String args[]) throws IOException
 {
   //Declaring variables
   BufferedReader dataIn = new BufferedReader (new InputStreamReader(System.in)); 
   String strChoice; 
   int choice=0; 

	try{
       String registry = args[0]; 
       String registration = "rmi://"+registry+":4099/ChatRegistry"; 
       ChatProvider reg = (ChatProvider) Naming.lookup(registration); 
        try {
      while(choice!=5)
       {
         //menu for registration
       System.out.println("\nMenu (enter 5 to quit"); 
       System.out.println("\t1.Register"); 
       System.out.println("\t2.Un Register"); 
       System.out.println("\t3.List of Chat Rooms"); 
       System.out.println("\t4.Inoformation");
       System.out.println("\t5.Quit"); 
       System.out.print("Enter your choice :");  
       strChoice = dataIn.readLine(); 
       choice = Integer.parseInt(strChoice); 
 
       switch (choice)
        {
          case 1: //Chat room registration
              System.out.print("Enter Room name : "); 
              String name = dataIn.readLine(); 
              System.out.print("Enter Information : "); 
              String info = dataIn.readLine(); 
              reg.register(name, info); 
              break; 
          case 2: //Chat room unregistration
              System.out.print("Enter Room name : "); 
              name = dataIn.readLine(); 
              reg.unregister(name); 
              break; 

          case 3://List of Chat rooms
             Vector list= reg.getChatRooms(); 
             System.out.println("\nList of Chat rooms"); 
             for (int i=0; i<list.size(); i++){ 
             System.out.println("\t" + list.get(i));} 
             break; 

          case 4://Information of a Chat Room
		 System.out.print("Enter Room name : "); 
             name = dataIn.readLine(); 
             String m = reg.getinfo(name);   
             System.out.println("Information of Room " +name + ": " + m);  
             break; 
          case 5: //quit
		 System.out.println("Quiting Chatroom Server Program..."); 
             break; 
	    default :
          System.out.println("Invalid response"); 
        
         }//end of switch
       }

           }//end of second try

         catch (NumberFormatException e)
          {
          System.out.println("Invalid response/choice" + e.getMessage()); 
          }
       } catch (Exception e) {
          System.out.println("Chat server err: " + e.getMessage());
          e.printStackTrace(); 
                            } 
 }
}


Client.java (text based)

/**************************************************************
 * Programmer: Md. Manzoor Murshed                            *
 * Date: 03/28/06                                             *  
 * Program: Chat Client                                       * 
 *                                                            *
 **************************************************************/

import java.rmi.*; 
import java.util.Vector;
import java.io.*; 
public class Client
{
 public static void main (String args[]) throws IOException
 {
   //Declaring variables
   BufferedReader dataIn = new BufferedReader (new InputStreamReader(System.in)); 
   String strChoice; 
   int choice=0; 
   int connection_slot = -1; 
   boolean am_connected=false; 

	try{
       String registry = args[0]; 
       String registration = "rmi://"+registry+":4099/ChatRegistry"; 
       ChatProvider reg = (ChatProvider) Naming.lookup(registration); 
        try {
      while(choice!=5)
       {
         //menu for registration
       System.out.println("\nMenu (enter 5 to quit"); 
       System.out.println("\t1.List"); 
       System.out.println("\t2.Join"); 
       System.out.println("\t3.Start Chatting");
       System.out.println("\t4.Leave");
       System.out.println("\t5.Quit"); 
       System.out.print("Enter your choice :");  
       strChoice = dataIn.readLine(); 
       choice = Integer.parseInt(strChoice); 
 
       switch (choice)
        {

          case 1://List of Chat rooms and Information
             Vector list= reg.getChatRooms(); 
             Vector Info= reg.getInformation(); 
             System.out.println("\nList of Chat rooms and Informations"); 
             for (int i=0; i<list.size(); i++){ 
             System.out.print("\tRoom: " + list.get(i));
             System.out.println("\t:Information: " + Info.get(i)); } 
             break; 

	    case 2: //Join a room 
              System.out.print("Enter Room name : "); 
              String name = dataIn.readLine(); 
              //reg.unregister(name); 
              try{
                connection_slot=reg.signIn(name,connection_slot);
                if(connection_slot>=0)
                     {am_connected=true;
                System.out.println("Connected to Chat room :" +name);}

                else
                System.out.println("Connection Refused");
                }catch(Exception e){}

		   break; 
          
          case 3: //Chat Chatting

		 String get_message=" ";
             String send_message=" "; 
             boolean q = false; 
        	while(q!=true){
            	if(am_connected){
                
			try{
                 System.out.print("Send: "); 
                 send_message=dataIn.readLine(); 
		     if (send_message.equals("bye")) 
                           {am_connected=false; q=true;}  
 			else if (!send_message.equals("")) 
                 	reg.broadcast(send_message, connection_slot); 

                  } catch (Exception e){ }

			try{
                    get_message=reg.getbroadcast();
                if (get_message.equals("bye")) q=true; 
                else if (!get_message.equals("")) 
                System.out.println("Received: " +get_message);
                 //reg.reset(); 
                      }catch(Exception e){}
                         
            	  try{
               	 Thread.currentThread().sleep(5000);
            		}catch(InterruptedException e){}
      
                 }//end of if

               }
      
              break; 
         
        
          case 4://Leave the Chat Room  
             am_connected=false;     
             break; 
    
         case 5: //quit
             System.out.println("Quiting Chatroom Server Program..."); 
             break; 
	  default :
          System.out.println("Invalid response"); 
        
         }//end of switch
       }

           }//end of second try

         catch (NumberFormatException e)
          {
          System.out.println("Invalid response/choice" + e.getMessage()); 
          }
       } catch (Exception e) {
          System.out.println("Chat server err: " + e.getMessage());
          e.printStackTrace(); 
                            } 
 }
}


ChatClient.java (graphical used interfaced based client)

/**************************************************************
 * Programmer: Md. Manzoor Murshed                            *
 * Date: 03/28/06                                             *  
 * Program: Chat Client Program                               * 
 *                                                            *
 **************************************************************/

import java.awt.*;
import java.awt.event.*;
import java.rmi.*;



public class ChatClient extends Frame implements Runnable {
    int connection_slot=-1;
    boolean am_connected=false;
    ChatProvider Chatobj; 
    ActionTextField sign_in,say,hear;
    String chat_name;
    ActionButton connect,disconnect,chat;
    ActionLabel chat_label;
    ActionPanel CardHolder;
    Panel sign_in_panel,chat_panel,sign_in_text;
    Panel chat_text,sign_in_button,chat_button;

    public static void main(String [] args){
        new ChatClient();
    }

    public ChatClient() {
        super("Chat Client Frame: Murshed ");
        sign_in=new ActionTextField("signin");
        say=new ActionTextField("Your Remarks Go Here");
        hear=new ActionTextField("Others Will Use This Field");
        hear.setEditable(false);
        connect =new ActionButton("connect");
        disconnect =new ActionButton("disconnect");
        chat =new ActionButton("chat");
        sign_in_panel=new Panel();
        chat_panel=new Panel();
        sign_in_text=new Panel();
        chat_text=new Panel();
        sign_in_button=new Panel();
        chat_button=new Panel();
        // "The Frame panel"
        CardHolder=new ActionPanel();
        chat_label=new ActionLabel("Sign In",Label.CENTER);
        setLayout(new BorderLayout());
        add("Center",CardHolder);
        add("North",chat_label);
        CardHolder.setLayout(new CardLayout());
        CardHolder.add("signin",
                       sign_in_panel);
        CardHolder.add("chat",chat_panel);

        sign_in_panel.setLayout(new BorderLayout());
        chat_panel.setLayout(new BorderLayout());
        sign_in_panel.add("South",sign_in_button);
        sign_in_panel.add("Center",sign_in_text);
        chat_panel.add("South",chat_button);
        chat_panel.add("Center",chat_text);
        chat_text.setLayout(new BorderLayout());
        sign_in_text.setLayout(new BorderLayout());
        chat_text.add("North",say);
        chat_text.add("South",hear);
        sign_in_text.add("Center",sign_in);
        sign_in_button.add(connect);
        chat_button.add(disconnect);
        chat_button.add(chat);
        connect.addActionListener(sign_in);
        connect.addActionListener(chat_label);
        connect.addActionListener(CardHolder);
        disconnect.addActionListener(chat_label);
        disconnect.addActionListener(CardHolder);
        chat.addActionListener(say);
        chat_label.setText("Sign In");
        System.out.println("In init");
        setSize(400,200);
        show();
        try {
           String registration = "rmi://localhost:4099/ChatRegistry";
	     Chatobj = (ChatProvider) Naming.lookup(registration); 
        } catch (Exception e) {
            System.out.println("ChatBoard: exception: " +
                               e.getMessage());
        } 
        new Thread(this).start();
    }
    public void run(){
        String get_message=" ";
        while (true) {
            if (am_connected) {
                try {
                    get_message=Chatobj.getbroadcast();
                } catch (Exception e) {
                }
                hear.setText(get_message);
            }
            try {
                Thread.currentThread().sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }

    class ActionButton extends Button implements ActionListener {

        public ActionButton(String s){
            super(s);
        }

        public void actionPerformed(ActionEvent evt){
            String s=evt.getActionCommand();
        }

    }//end of innerclass

    class ActionTextField extends TextField implements ActionListener {
        String field_holder;
        public ActionTextField(String s){
            super(s);
        }

        public void actionPerformed(ActionEvent evt){
            String s=evt.getActionCommand();
            field_holder=getText().trim();
            if (s.equals("connect")) {
                if (field_holder.length()<4) {
                    setText("Your Chat Name Must Be At Least 4 Letters");
                } else {
                    try {
                        System.out.println(connection_slot);
                        connection_slot=Chatobj.signIn(field_holder,connection_slot);
                        System.out.println(connection_slot);
                        if (connection_slot>=0)
                            am_connected=true;
                        else
                            setText("Connection Refused");
                    } catch (Exception e) {
                    }

                }
            }
            if (s.equals("chat")) {
                try {
                    Chatobj.broadcast(field_holder,connection_slot);
                } catch (Exception e) {
                }
            }
        }
    }
    class ActionPanel extends Panel implements ActionListener {
        public ActionPanel(){
            super();
        }
        public void actionPerformed(ActionEvent evt){
            if (connection_slot>=0) {
                String s=evt.getActionCommand();
                if ((s.equals("disconnect"))|(s.equals("connect")&((sign_in.getText()).trim().length()>3)))
                    ((CardLayout)getLayout()).next(this);
                if (s.equals("disconnect")) {
                    try {
                        Chatobj.signIn(" ",connection_slot);
                    } catch (Exception e) {
                    }
                    connection_slot=-1;
                }
            }
        }

    }
    class ActionLabel extends Label implements ActionListener {
        public ActionLabel(String s,int i){
            super(s,i);
        }

        public void actionPerformed(ActionEvent evt){

            String s=evt.getActionCommand();
            String hold=sign_in.getText();
            if (s.equals("connect")&(connection_slot>=0))setText("Start Chatting");
            if (s.equals("disconnect"))setText("Sign In");
        }

    }

}//end of class
